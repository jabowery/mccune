============================== prooftrans ============================
mccune (32) version 2008-05A, May 2008.
Process 12536 was started by mccune on cleo,
Wed May  7 11:30:50 2008
The command was "/home/mccune/LADR/bin/mccune -f steam.in".
============================== end of head ===========================

============================== end of input ==========================

============================== PROOF =================================

% -------- Comments from original proof --------
% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 74.
% Level of proof is 10.
% Maximum clause weight is 13.
% Given clauses 44.

c 1  Wolf(x) -> animal(x) # label(non_clause)
i assumption
e
c 2  Fox(x) -> animal(x) # label(non_clause)
i assumption
e
c 3  Bird(x) -> animal(x) # label(non_clause)
i assumption
e
c 5  Snail(x) -> animal(x) # label(non_clause)
i assumption
e
c 6  Grain(x) -> plant(x) # label(non_clause)
i assumption
e
c 7  (exists x Wolf(x)) # label(non_clause)
i assumption
e
c 8  (exists x Fox(x)) # label(non_clause)
i assumption
e
c 9  (exists x Bird(x)) # label(non_clause)
i assumption
e
c 11  (exists x Snail(x)) # label(non_clause)
i assumption
e
c 12  (exists x Grain(x)) # label(non_clause)
i assumption
e
c 13  (all x (animal(x) -> (all y (plant(y) -> eats(x,y))) | (all z (animal(z) & Smaller(z,x) & (exists u (plant(u) & eats(z,u))) -> eats(x,z))))) # label(non_clause)
i assumption
e
c 15  Snail(x) & Bird(y) -> Smaller(x,y) # label(non_clause)
i assumption
e
c 16  Bird(x) & Fox(y) -> Smaller(x,y) # label(non_clause)
i assumption
e
c 17  Fox(x) & Wolf(y) -> Smaller(x,y) # label(non_clause)
i assumption
e
c 20  Snail(x) -> (exists y (plant(y) & eats(x,y))) # label(non_clause)
i assumption
e
c 21  Wolf(x) & Fox(y) -> -eats(x,y) # label(non_clause)
i assumption
e
c 22  Wolf(x) & Grain(y) -> -eats(x,y) # label(non_clause)
i assumption
e
c 23  Bird(x) & Snail(y) -> -eats(x,y) # label(non_clause)
i assumption
e
c 24  (exists x exists y (animal(x) & animal(y) & eats(x,y) & (all z (Grain(z) -> eats(y,z))))) # label(non_clause) # label(goal)
i goal
e
c 25  Wolf(c1)
i clausify
p 7
e
c 26  -Wolf(x) | animal(x)
i clausify
p 1
e
c 27  -Fox(x) | -Wolf(y) | Smaller(x,y)
i clausify
p 17
e
c 28  -Wolf(x) | -Fox(y) | -eats(x,y)
i clausify
p 21
e
c 29  -Wolf(x) | -Grain(y) | -eats(x,y)
i clausify
p 22
e
c 30  Fox(c2)
i clausify
p 8
e
c 31  -Fox(x) | animal(x)
i clausify
p 2
e
c 32  -Bird(x) | -Fox(y) | Smaller(x,y)
i clausify
p 16
e
c 33  -Fox(x) | Smaller(x,c1)
i resolve
p 27
p 25
e
c 34  -Fox(x) | -eats(c1,x)
i resolve
p 28
p 25
e
c 35  Bird(c3)
i clausify
p 9
e
c 36  -Bird(x) | animal(x)
i clausify
p 3
e
c 38  -Snail(x) | -Bird(y) | Smaller(x,y)
i clausify
p 15
e
c 40  -Bird(x) | -Snail(y) | -eats(x,y)
i clausify
p 23
e
c 41  -Bird(x) | Smaller(x,c2)
i resolve
p 32
p 30
e
c 48  Snail(c5)
i clausify
p 11
e
c 49  -Snail(x) | animal(x)
i clausify
p 5
e
c 50  -Snail(x) | plant(f2(x))
i clausify
p 20
e
c 51  -Snail(x) | eats(x,f2(x))
i clausify
p 20
e
c 52  -Snail(x) | Smaller(x,c3)
i resolve
p 38
p 35
e
c 53  -Snail(x) | -eats(c3,x)
i resolve
p 40
p 35
e
c 54  Grain(c6)
i clausify
p 12
e
c 55  -Grain(x) | plant(x)
i clausify
p 6
e
c 56  -animal(x) | -animal(y) | -eats(x,y) | Grain(f3(x,y))
i deny
p 24
e
c 57  -Grain(x) | -eats(c1,x)
i resolve
p 29
p 25
e
c 58  Smaller(c2,c1)
i resolve
p 33
p 30
e
c 59  -animal(x) | -plant(y) | eats(x,y) | -animal(z) | -Smaller(z,x) | -plant(u) | -eats(z,u) | eats(x,z)
i clausify
p 13
e
c 60  Smaller(c3,c2)
i resolve
p 41
p 35
e
c 62  Smaller(c5,c3)
i resolve
p 52
p 48
e
c 63  -animal(x) | -animal(y) | -eats(x,y) | -eats(y,f3(x,y))
i deny
p 24
e
c 64  animal(c1)
i resolve
p 25
p 26
e
c 65  animal(c2)
i resolve
p 30
p 31
e
c 66  -eats(c1,c2)
i resolve
p 34
p 30
e
c 67  animal(c3)
i resolve
p 35
p 36
e
c 72  animal(c5)
i resolve
p 48
p 49
e
c 73  plant(f2(c5))
i resolve
p 50
p 48
e
c 74  eats(c5,f2(c5))
i resolve
p 51
p 48
e
c 75  -eats(c3,c5)
i resolve
p 53
p 48
e
c 76  plant(c6)
i resolve
p 54
p 55
e
c 77  -animal(x) | -animal(y) | -eats(x,y) | plant(f3(x,y))
i resolve
p 56
p 55
e
c 78  -eats(c1,c6)
i resolve
p 57
p 54
e
c 80  -animal(c1) | -plant(x) | eats(c1,x) | -animal(c2) | -plant(y) | -eats(c2,y) | eats(c1,c2)
i resolve
p 58
p 59
e
c 81  -plant(x) | eats(c1,x) | -plant(y) | -eats(c2,y)
i copy
p 80
i unit_del(a,64)
i unit_del(d,65)
i unit_del(g,66)
e
c 82  -animal(c2) | -plant(x) | eats(c2,x) | -animal(c3) | -plant(y) | -eats(c3,y) | eats(c2,c3)
i resolve
p 60
p 59
e
c 83  -plant(x) | eats(c2,x) | -plant(y) | -eats(c3,y) | eats(c2,c3)
i copy
p 82
i unit_del(a,65)
i unit_del(d,67)
e
c 84  -animal(c3) | -plant(x) | eats(c3,x) | -animal(c5) | -plant(y) | -eats(c5,y) | eats(c3,c5)
i resolve
p 62
p 59
e
c 85  -plant(x) | eats(c3,x) | -plant(y) | -eats(c5,y)
i copy
p 84
i unit_del(a,67)
i unit_del(d,72)
i unit_del(g,75)
e
c 90  -plant(x) | eats(c2,x) | -eats(c3,x) | eats(c2,c3)
i factor(83,a,c)
e
c 103  -eats(c2,c6)
i ur
p 81
p 76
p 78
p 76
e
c 109  -plant(x) | eats(c3,x)
i resolve
p 85
p 74
i unit_del(c,73)
e
c 113  eats(c3,c6)
i resolve
p 109
p 76
e
c 117  eats(c2,c3)
i resolve
p 113
p 90
i unit_del(a,76)
i unit_del(b,103)
e
c 124  plant(f3(c2,c3))
i resolve
p 117
p 77
i unit_del(a,65)
i unit_del(b,67)
e
c 125  -eats(c3,f3(c2,c3))
i resolve
p 117
p 63
i unit_del(a,65)
i unit_del(b,67)
e
c 133  $F
i resolve
p 124
p 109
i unit_del(a,125)
e

============================== end of proof ==========================
